package ktp_lab3;

/**
 * Этот класс представляет один шаг в пути, сгенерированном путём поиска A *
 * алгоритмом. Путевые точки состоят из местоположения, 
 * предыдущей путевой точки в пути и некоторых значений стоимости, 
 * используемых для определения наилучшего пути.
 **/
public class Waypoint
{
    /** The location of this waypoint. **/
    Location loc;

    /**
     *  Предыдущая путевая точка в этом пути или <code> null </ code>,
     *   если это корень поиска A *.
     **/
    Waypoint prevWaypoint;

    /**
     * * В этом поле хранится общая предыдущая стоимость проезда 
     * от начальной точки до этой путевой точки через цепочку путевых точек. 
     * Это фактическая стоимость следования пути; это не включает никаких оценок.
     **/
    private float prevCost;

    /**
     *  В этом поле хранится оценка оставшейся стоимости поездки и 
     * эта путевая точка до конечного пункта назначения.
     **/
    private float remainingCost;


    /**
     * Создайте новую путевую точку для указанного местоположения. 
     * Предыдущая путевая точка 
     * может быть не указана, или ссылка может быть <code> null </ code>, чтобы указать, что путевая точка является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint)
    {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /**Возвращает местоположение путевой точки. **/
    public Location getLocation()
    {
        return loc;
    }
    
    /**
     *  Возвращает предыдущую путевую точку в пути
     *   или <code> null </ code>, если это начало пути.
     **/
    public Waypoint getPrevious()
    {
        return prevWaypoint;
    }
    
    /** 
     * * Этот мутатор позволяет использовать как предыдущую, так и оставшуюся стоимость
     * установить в одном вызове метода. 
     * Обычно эти значения в любом случае будут установлены одновременно.
     **/
    public void setCosts(float prevCost, float remainingCost)
    {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /** Возвращает фактическую стоимость достижения 
     * этой точки из начального местоположения через ряд точек в этой цепочке.
     **/
    public float getPreviousCost()
    {
        return prevCost;
    }

    /**
     *  Возвращает оценку оставшейся стоимости пути от этого
     * указывает  на конечный пункт назначения.
     **/
    public float getRemainingCost()
    {
        return remainingCost;
    }

    /** Возвращает оценку общей стоимости для этой путевой точки. Это включает в себя
     * фактическая стоимость пути до этой точки из начального местоположения
     *  плюс оценка оставшейся стоимости проезда от этой точки до пункта назначения.
     **/
    public float getTotalCost()
    {
        return prevCost + remainingCost;
    }
}

